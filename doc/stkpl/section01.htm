<!doctype html>
<html lang="en">

<HEAD>
<title>stkpl</title>
<meta charset="utf-8">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<div id="container">
<H1>1. StkPl</H1>


<H4 ID="1.1">1.1 StkPl API一覧</H4>
<div class="topic">
StkPlが提供するAPI一覧を以下に示します。<p>
<table class="tblstyle">
<tr><td>
size_t StkPlConvUtf16ToUtf32(char32_t*, size_t, const char16_t*)<br/>
size_t StkPlConvUtf32ToUtf16(char16_t*, size_t, const char32_t*)<br/>
size_t StkPlConvUtf8ToUtf32(char32_t*, size_t, const char*)<br/>
size_t StkPlConvUtf32ToUtf8(char*, size_t, const char32_t*)<br/>
size_t StkPlConvUtf8ToUtf16(char16_t*, size_t, const char*)<br/>
size_t StkPlConvUtf16ToUtf8(char*, size_t, const char16_t*)<br/>
</td>
<td>異なるUTFコードに変換します。</td></tr>
<tr><td>
size_t StkPlConvUtf16ToWideChar(wchar_t*, size_t, const char16_t*)<br/>
size_t StkPlConvWideCharToUtf16(char16_t*, size_t, const wchar_t*)<br/>
size_t StkPlConvWideCharToUtf32(char32_t*, size_t, const wchar_t*)<br/>
size_t StkPlConvUtf32ToWideChar(wchar_t*, size_t, const char32_t*)<br/>
size_t StkPlConvUtf8ToWideChar(wchar_t*, size_t, const char*)<br/>
size_t StkPlConvWideCharToUtf8(char*, size_t, const wchar_t*)<br/>
</td>
<td>UTFとワイドキャラクタ文字列を相互に変換します。</td></tr>
<tr><td>
char32_t* StkPlCreateUtf32FromUtf16(const char16_t*)<br/>
char16_t* StkPlCreateUtf16FromUtf32(const char32_t*)<br/>
char32_t* StkPlCreateUtf32FromUtf8(const char*)<br/>
char* StkPlCreateUtf8FromUtf32(const char32_t*)<br/>
char16_t* StkPlCreateUtf16FromUtf8(const char*)<br/>
char* StkPlCreateUtf8FromUtf16(const char16_t*)<br/>
</td>
<td>異なるUTFコードに変換します。同時に必要な領域を確保します。</td></tr>
<tr><td>
wchar_t* StkPlCreateWideCharFromUtf16(const char16_t*)<br/>
char16_t* StkPlCreateUtf16FromWideChar(const wchar_t*)<br/>
char32_t* StkPlCreateUtf32FromWideChar(const wchar_t*)<br/>
wchar_t* StkPlCreateWideCharFromUtf32(const char32_t*)<br/>
wchar_t* StkPlCreateWideCharFromUtf8(const char*)<br/>
char* StkPlCreateUtf8FromWideChar(const wchar_t*)<br/>
</td>
<td>UTFとワイドキャラクタ文字列を相互に変換します。同時に必要な領域を確保します。</td></tr>

<tr><td>
void StkPlGetTimeInRfc2822(char[64], bool)<br/>
void StkPlGetWTimeInRfc2822(wchar_t[64], bool)<br/>
void StkPlGetTimeInOldFormat(char[64], bool)<br/>
void StkPlGetWTimeInOldFormat(wchar_t[64], bool)<br/>
</td>
<td>ローカルタイムまたはUTCを返却します。</td></tr>

<tr>
    <td>FileInfoList* StkPlCreateFileInfoList(const wchar_t[FILENAME_MAX])</td>
    <td>API creates file information list under the specified directory.</td>
</tr>

<tr>
    <td>void StkPlDeleteFileInfoList(FileInfoList*)</td>
    <td>Delete file information list.</td>
</tr>

<tr>
    <td>bool StkPlDeleteFile(wchar_t*)</td>
    <td>Delete a file.</td>
</tr>

<tr>
    <td>int StkPlCreateDirectory(const wchar_t*)</td>
    <td>Create a directory.</td>
</tr>

<tr>
    <td>int StkPlAddSeparator(wchar_t*, size_t)</td>
    <td>Add separator to the existing path.</td>
</tr>

<tr>
    <td>int StkPlGetUsedMemorySizeOfCurrentProcess()</td>
    <td>Get physical memory size used by current process.</td>
</tr>

<tr>
    <td>int StkPlGetUsedVmSizeOfCurrentProcess()</td>
    <td>Get virtual memory size used by current process.</td>
</tr>

<tr>
    <td>wchar_t* StkPlSjisToWideChar(const char*)</td>
    <td>Convert SJIS encoded string to wide char string.</td>
</tr>

<tr>
    <td>char* StkPlWideCharToSjis(const wchar_t*)</td>
    <td>Convert wide char string to SJIS encoded string.</td>
</tr>

<tr>
    <td>int StkPlExec(const wchar_t*, int, int*)</td>
    <td>Execute the command specified</td>
</tr>

</table><p>
</div>



<H4 ID="1.2">1.2<br/>
size_t StkPlConvUtf16ToUtf32(char32_t* UtfRes, size_t Size, const char16_t* Utf)<br/>
size_t StkPlConvUtf32ToUtf16(char16_t* UtfRes, size_t Size, const char32_t* Utf)<br/>
size_t StkPlConvUtf8ToUtf32(char32_t* UtfRes, size_t Size, const char* Utf)<br/>
size_t StkPlConvUtf32ToUtf8(char* UtfRes, size_t Size, const char32_t* Utf)<br/>
size_t StkPlConvUtf8ToUtf16(char16_t* UtfRes, size_t Size, const char* Utf)<br/>
size_t StkPlConvUtf16ToUtf8(char* UtfRes, size_t Size, const char16_t* Utf)<br/>
</H4>
<div class="topic">
異なるUTFコードに変換します。<br/>
Sizeに0を指定した場合，変換を行わず，変換後の領域のサイズを返します。このときUtfResは使用されません。<br/>
<table class="tblstyle">
<tr><td>UtfRes[出力]</td><td>変換後のUTFコードが格納される領域</td></tr>
<tr><td>Size[入力]</td><td>変換後のUTFコードが格納される領域のサイズ(終端文字'\0'を含めたサイズ)</td></tr>
<tr><td>Utf[入力]</td><td>変換前のUTFコードが格納される領域)</td></tr>
<tr><td>[戻り値]</td><td>変換後のUTFコードのサイズ</td></tr>
</table>
</div>



<H4 ID="1.3">1.3<br/>
size_t StkPlConvUtf16ToWideChar(wchar_t* Res, size_t Size, const char16_t* Str)<br/>
size_t StkPlConvWideCharToUtf16(char16_t* Res, size_t Size, const wchar_t* Str)<br/>
size_t StkPlConvWideCharToUtf32(char32_t* Res, size_t Size, const wchar_t* Str)<br/>
size_t StkPlConvUtf32ToWideChar(wchar_t* Res, size_t Size, const char32_t* Str)<br/>
size_t StkPlConvUtf8ToWideChar(wchar_t* Res, size_t Size, const char* Str)<br/>
size_t StkPlConvWideCharToUtf8(char* Res, size_t Size, const wchar_t* Str)<br/>
</H4>
<div class="topic">
UTFとワイドキャラクタ文字列を相互に変換します。<br/>
Sizeに0を指定した場合，変換を行わず，変換後の領域のサイズを返します。このときUtfResは使用されません。<br/>
<table class="tblstyle">
<tr><td>Res[出力]</td><td>変換後のUTFコードまたはワイドキャラクタ文字列が格納される領域</td></tr>
<tr><td>Size[入力]</td><td>変換後のUTFコードまたはワイドキャラクタ文字列が格納される領域のサイズ(終端文字'\0'を含めたサイズ)</td></tr>
<tr><td>Utf[入力]</td><td>変換前のUTFコードまたはワイドキャラクタ文字列が格納される領域)</td></tr>
<tr><td>[戻り値]</td><td>変換後のUTFコードまたはワイドキャラクタ文字列のサイズ</td></tr>
</table>
</div>



<H4 ID="1.4">1.4<br/>
char32_t* StkPlCreateUtf32FromUtf16(const char16_t* Utf)<br/>
char16_t* StkPlCreateUtf16FromUtf32(const char32_t* Utf)<br/>
char32_t* StkPlCreateUtf32FromUtf8(const char* Utf)<br/>
char* StkPlCreateUtf8FromUtf32(const char32_t* Utf)<br/>
char16_t* StkPlCreateUtf16FromUtf8(const char* Utf)<br/>
char* StkPlCreateUtf8FromUtf16(const char16_t* Utf)<br/>
</H4>
<div class="topic">
異なるUTFコードに変換します。同時に必要な領域を確保します。このAPIの呼び出し元は，変換したコードを使用後，領域を解放する必要があります。<br/>
<table class="tblstyle">
<tr><td>Utf[入力]</td><td>変換前のUTFコードが格納される領域</td></tr>
<tr><td>[戻り値]</td><td>変換後のUTFコードが格納される領域</td></tr>
</table>
</div>



<H4 ID="1.5">1.5<br/>
wchar_t* StkPlCreateWideCharFromUtf16(const char16_t* Str)<br/>
char16_t* StkPlCreateUtf16FromWideChar(const wchar_t* Str)<br/>
char32_t* StkPlCreateUtf32FromWideChar(const wchar_t* Str)<br/>
wchar_t* StkPlCreateWideCharFromUtf32(const char32_t* Str)<br/>
wchar_t* StkPlCreateWideCharFromUtf8(const char* Str)<br/>
char* StkPlCreateUtf8FromWideChar(const wchar_t* Str)<br/>
</H4>
<div class="topic">
UTFとワイドキャラクタ文字列を相互に変換します。同時に必要な領域を確保します。このAPIの呼び出し元は，変換したコードを使用後，領域を解放する必要があります。<br/>
<table class="tblstyle">
<tr><td>Str[入力]</td><td>変換前のUTFコードまたはワイドキャラクタ文字列が格納される領域</td></tr>
<tr><td>[戻り値]</td><td>変換後のUTFコードまたはワイドキャラクタ文字列が格納される領域</td></tr>
</table>
</div>



    <H4 ID="1.6">1.6<br/>
        void StkPlGetTimeInRfc2822(char Date[64], bool IsLocalTime)<br/>
        void StkPlGetWTimeInRfc2822(wchar_t Date[64], bool IsLocalTime)<br/>
        void StkPlGetTimeInIso8601(char Date[64], bool IsLocalTime)<br/>
        void StkPlGetWTimeInIso8601(wchar_t Date[64], bool IsLocalTime)<br/>
        void StkPlGetTimeInOldFormat(char Date[64], bool IsLocalTime)<br/>
        void StkPlGetWTimeInOldFormat(wchar_t Date[64], bool IsLocalTime)<br/>
    </H4>
    <div class="topic">
        RFC 2822形式, ISO 8601形式またはYYYY-MM-DD hh:mm:ss形式で，ローカルタイムまたはUTCを返却します。<br/>
        <table class="tblstyle">
            <tr><td>Date[出力]</td><td>ローカルタイムまたはUTC</td></tr>
            <tr><td>IsLocalTime[入力]</td><td>true : ローカルタイムを取得する<br/>false : UTCを取得する</td></tr>
        </table>
    </div>
        


    <H4 ID="1.7">1.7 FileInfoList* StkPlCreateFileInfoList(const wchar_t TargetDir[FILENAME_MAX])</H4>
    <div class="topic">
        API creates file information list under the specified directory.<br/>
        <table class="tblstyle">
            <tr><td>TargetDir[Input]</td><td>Target directory for acquiring file information list</td></tr>
            <tr>
                <td>[Return]</td>
                <td>File information list. This object needs to be deleted at caller side.<br/>
                    <pre><code>
struct FileInfoList {
    wchar_t FileName[FILENAME_MAX];
    bool IsDir;
    size_t Size;
    long long UpdateTime;
    FileInfoList* Next;
};
                    </code></pre>
                </td>
            </tr>
        </table>
    </div>



    <H4 ID="1.8">1.8 void StkPlDeleteFileInfoList(FileInfoList* FileInfo)</H4>
    <div class="topic">
        Delete file information list.
        <table class="tblstyle">
            <tr><td>FileInfo[Input]</td><td>File information list to be deleted.</td></tr>
        </table>
    </div>
    


    <H4 ID="1.9">1.9 bool StkPlDeleteFile(wchar_t* Path)</H4>
    <div class="topic">
        Delete a file.
        <table class="tblstyle">
            <tr><td>Path[Input]</td><td>Path to the target file which you want to delete.</td></tr>
            <tr><td>[Return]</td><td>true: Deleted, false: An error occurred</td></tr>
        </table>
    </div>



    <H4 ID="1.10">1.10 int StkPlCreateDirectory(const wchar_t* Path)</H4>
    <div class="topic">
        Create a directory.
        <table class="tblstyle">
            <tr><td>Path[Input]</td><td>Path to the directory which you want to create.</td></tr>
            <tr><td>[Return]</td><td>0: Succeeded, -1: Failed</td></tr>
        </table>
    </div>



    <H4 ID="1.11">1.11 int StkPlAddSeparator(wchar_t* Path, size_t PathSize)</H4>
    <div class="topic">
        Add separator to the existing path.<br/>
        <ul>
            <li>Linux : '/' is to be added.</li>
            <li>Windows : '\' is to be added.</li>
        </ul>
        <table class="tblstyle">
            <tr><td>Path[Output]</td><td>Path to be added the separator.</td></tr>
            <tr><td>PathSize[Input]</td><td>Buffer size of "Path".</td></tr>
            <tr><td>[Return]</td><td>0: always zero returns</td></tr>
        </table>
    </div>



    <H4 ID="1.12">1.12 int StkPlGetUsedMemorySizeOfCurrentProcess()</H4>
    <div class="topic">
        Get physical memory size used by current process.<br/>
        This API returns the size in KB.<br/>
        This API acquires necessary information using following API or file.<br/>
        <ul>
            <li>Windows: GetProcessMemoryInfo API - WorkingSetSize</li>
            <li>Linux: /proc//status - VmRSS (in KB)</li>
        </ul>
        <table class="tblstyle">
            <tr><td>[Return]</td><td>Used physical memory size of current process</td></tr>
        </table>
    </div>



    <H4 ID="1.13">1.13 int StkPlGetUsedVmSizeOfCurrentProcess()</H4>
    <div class="topic">
        Get virtual memory size used by current process.<br/>
        This API returns the size in KB.<br/>
        This API acquires necessary information using following API or file.<br/>
        <ul>
            <li>Windows: GetProcessMemoryInfo API - PagefileUsage</li>
            <li>Linux: /proc//status - VmSize (in KB)</li>
        </ul>
        <table class="tblstyle">
            <tr><td>[Return]</td><td>Used virtual memory size of current process</td></tr>
        </table>
    </div>



    <H4 ID="1.14">1.14 wchar_t* StkPlSjisToWideChar(const char* Txt)</H4>
    <div class="topic">
        Convert SJIS encoded string to wide char string.<br/>
        This API creates necessary memory for returning wide char string.
        After using wide char string returned, it needs to be deleted at caller side.<br/>
        This API returns gryph character if it detects unknown code for the conversion.<br/>
        In case you use Linux, preliminaly you need to install ja_JP.SJIS locale to your system before you call this API.<br/>
        <table class="tblstyle">
            <tr><td>Txt[Input]</td><td>SJIS encoded string</td></tr>
            <tr><td>[Return]</td><td>Converted wide char string</td></tr>
        </table>
    </div>



    <H4 ID="1.15">1.15 char* StkPlWideCharToSjis(const wchar_t* Txt)</H4>
    <div class="topic">
        Convert wide char string to SJIS encoded string.<br/>
        This API creates necessary memory for returning SJIS encoded string.
        After using SJIS encoded string returned, it needs to be deleted at caller side.<br/>
        In case you use Linux, preliminaly you need to install ja_JP.SJIS locale to your system before you call this API.<br/>
        <table class="tblstyle">
            <tr><td>Txt[Input]</td><td>wide char string</td></tr>
            <tr><td>[Return]</td><td>SJIS encoded string</td></tr>
        </table>
    </div>



    <H4 ID="1.16">1.16 int StkPlExec(const wchar_t* CmdLine, int TimeoutInMs, int* Result)</H4>
    <div class="topic">
        Execute the command specified.<br/>
        The command will be timeout in TimeoutInMs.<br/>
        If expired, related process tree with the command will be deleted.<br/>
        <table class="tblstyle">
            <tr><td>CmdLine[Input]</td><td>Command line which is executed.</td></tr>
            <tr><td>TimeoutInMs[Input]</td><td>Timeout in milliseconds.</td></tr>
            <tr><td>Result[Output]</td><td>Result status (0:Normal, -1:Abnormal)</td></tr>
            <tr><td>[Return]</td><td>(-1:internal error(Result=-1), -2:timeout(Result=-1), otherwise:exist code of the command)</td></tr>
        </table>
    </div>
    


</div>
</BODY>
</html>
