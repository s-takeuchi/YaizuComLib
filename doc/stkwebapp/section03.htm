<!DOCTYPE html>

<html lang="ja">

<HEAD>
<title>StkWebApp</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<div id="container">
<H1>3. stkcommon.js</H1>



<H2 ID="3.1">3.1 stkcommon.js概要</H2>
<div class="topic">
  stkcommon.jsは，レスポンシブなWebアプリケーションを実現するための，共通のライブラリです。<br/>
  stkcommon.jsを使用することにより，レスポンシブなWebアプリケーションを，効率よく開発することができます。<br/>
</div><p>



<H2 ID="3.2">3.2 stkcommon.jsの前提ソフトウェア</H2>
<div class="topic">
  stkcommon.jsは以下のソフトウェアを前提とします。<br/>
  stkcommon.jsを使用するソフトウェアは，事前にこれらのソフトウェアを組み込んでおく必要があります。<br/>
  <ul>
  <li>Bootstrap 4.4.1</li>
  <li>JQuery 3.2.0</li>
  <li>IcoMoon-Free</li>
  </ul>
</div>



<H2 ID="3.3">3.3 stkcommon.jsのAPI一覧</H2>
<div class="topic">
stkcommon.jsの公開APIには下記のものがあります。<br/>
<table class="tblstyle">
<tr><td><a href="#3.4.1">function showLoginModal(func)</a></td><td>ログインダイアログを表示します。</td></tr>
<tr><td><a href="#3.4.2">function showInputModal(title, contents)</a></td><td>入力ダイアログを表示します。</td></tr>
<tr><td><a href="#3.4.3">function closeInputModal()</a></td><td>入力ダイアログを閉じます。</td></tr>
<tr><td><a href="#3.4.4">function initMainPage(title, iconname, contents)</a></td><td>メインページを初期化します。</td></tr>
<tr><td><a href="#3.4.5">function addRsCommand(func, icon, enable)</a></td><td>ナビゲーションバーにコマンドアイコンを追加します。</td></tr>
<tr><td><a href="#3.4.6">function clearRsCommand()</a></td><td>ナビゲーションバーのコマンドアイコンおよびドロップダウンメニューをクリアします。</td></tr>
<tr><td><a href="#3.4.7">function addDropDown(dropdownTitle)</a></td><td>ナビゲーションバーにドロップダウンメニューを追加します。</td></tr>
<tr><td><a href="#3.4.8">function changeDropDownTitle(dropdownTitle)</a></td><td>ナビゲーションバーのドロップダウンメニューのタイトルを変更します。</td></tr>
<tr><td><a href="#3.4.9">function getDropDownMenu(index)</a></td><td>ナビゲーションバーのドロップダウンメニューの要素名を取得します。</td></tr>
<tr><td><a href="#3.4.10">function addDropDownMenu(index, menuTitle, func)</a></td><td>ナビゲーションバーのドロップダウンメニューに要素を追加します。</td></tr>
<tr><td><a href="#3.4.11">function addClientMessage(code, msg)</a></td><td>クライアントメッセージを追加します。</td></tr>
<tr><td><a href="#3.4.12">function deleteClientMessage(code)</a></td><td>クライアントメッセージを削除します。</td></tr>
<tr><td><a href="#3.4.13">function getClientMessageEn(code)</a></td><td>クライアントメッセージ(英語)を取得します。</td></tr>
<tr><td><a href="#3.4.14">function getClientMessageJa(code)</a></td><td>クライアントメッセージ(日本語)を取得します。</td></tr>
<tr><td><a href="#3.4.15">function setClientLanguage(lang)</a></td><td>クライアントメッセージの言語を指定します。</td></tr>
<tr><td><a href="#3.4.16">function getClientLanguage()</a></td><td>クライアントメッセージの言語を取得します。</td></tr>
<tr><td><a href="#3.4.17">function getClientMessage(code)</a></td><td>クライアントメッセージを指定した言語で取得します。</td></tr>
<tr><td><a href="#3.4.18">function displayAlertSuccess(parent, msg)</a></td><td>Successメッセージを表示します。</td></tr>
<tr><td><a href="#3.4.19">function displayAlertDanger(parent, msg)</a></td><td>Dangerメッセージを表示します。</td></tr>
<tr><td><a href="#3.4.20">function displayAlertWarning(parent, msg)</a></td><td>Warningメッセージを表示します。</td></tr>
<tr><td><a href="#3.4.21">function displayAlertInfo(parent, msg)</a></td><td>Infoメッセージを表示します。</td></tr>
<tr><td><a href="#3.4.22">function apiCall(method, url, request, keystring, targetFunc)</a></td><td>REST APIを呼び出します。</td></tr>
<tr><td><a href="#3.4.23">function MultiApiCall(contents, targetFunc)</a></td><td>複数のREST APIを同時に呼び出します。</td></tr>
</table>
</div>



<H2 ID="3.4">3.4 stkcommon.jsのAPI詳細</H2>
<H3 ID="3.4.1">3.4.1 function showLoginModal(func)</H3>
<div class="topic">
ログインダイアログを表示します。<br/>
ログインダイアログで設定したログインIDおよびパスワードは，stkcommon.jsのグローバル変数loginId, loginPwに格納されます。<br/>
loginId, loginPwは，cookieにも24時間記憶され，loginId，loginPwがcookieに存在する間は，本関数を呼び出してもログインダイアログが表示されません。<br/>
REST API呼び出しにおいて，HTTPヘッダのAuthorizationに，"Bearer &lt;loginId&gt; &lt;loginPw&gt;"が指定されます。<br/>
認証のため，引数で指定された関数func()を呼び出します。<br/>
func()関数内ではグローバル変数loginId, loginPwを評価する必要があります。func()がtrueを返却した場合，認証は成功。func()がfalseを返却した場合，認証は失敗となります。<br/>
認証が成功すると，ログインダイアログは自動的に閉じます。<br/>
<table class="tblstyle">
<tr><td>func[入力]</td><td>認証用関数。括弧および引数は指定できない。trueを返す場合，認証成功。falseを返す場合，認証失敗。</td></tr>
</table>
</div>



<H3 ID="3.4.2">3.4.2 function showInputModal(title, contents)</H3>
<div class="topic">
入力ダイアログを表示します。<br/>
入力ダイアログを閉じるには，closeInputModal()を呼びます。<br/>
<table class="tblstyle">
<tr><td>title[入力]</td><td>入力ダイアログのタイトル</td></tr>
<tr><td>contents[入力]</td><td>入力ダイアログに表示するHTML要素(Contents)</td></tr>
</table>
</div>



<H3 ID="3.4.3">3.4.3 function closeInputModal()</H3>
<div class="topic">
入力ダイアログを閉じます。<br/>
</div>



<H3 ID="3.4.4">3.4.4 function initMainPage(title, iconname, contents)</H3>
<div class="topic">
メインページを初期化します。<br/>
<table class="tblstyle">
<tr><td>title[入力]</td><td>ナビゲーションバーの左側に表示するブランド名</td></tr>
<tr><td>iconname[入力]</td><td>アイコンファイルのパス</td></tr>
<tr><td>contents[入力]</td><td>
  ナビゲーションバーに表示するメニューに関する次の要素を含む情報を指定。<br/>
  <ul>
  <li>id<br/>メニューのID</li>
  <li>actApiName<br/>メニューを押下したときに呼ぶ関数名。括弧および引数は指定できない。</li>
  <li>title<br/>表示するメニューの名称</li>
  </ul>
  initMainPageを呼び出しただけでは，ナビゲーションバーにメニューは表示されない。メニュを表示するには，メニューに対してshow()を実行する。
</td></tr>
</table>
</div>



<H3 ID="3.4.5">3.4.5 function addRsCommand(func, icon, enable)</H3>
<div class="topic">
ナビゲーションバーにコマンドアイコンを追加します。<br/>
<table class="tblstyle">
<tr><td>func[入力]</td><td>コマンドアイコンを押下したときに呼び出される関数。括弧付きで指定する。</td></tr>
<tr><td>icon[入力]</td><td>IcoMoonのアイコンID</td></tr>
<tr><td>enable[入力]</td><td>true:活性, false:非活性</td></tr>
</table>
</div>



<H3 ID="3.4.6">3.4.6 function clearRsCommand()</H3>
<div class="topic">
ナビゲーションバーのコマンドアイコンおよびドロップダウンメニューをクリアします。<br/>
</div>



<H3 ID="3.4.7">3.4.7 function addDropDown(dropdownTitle)</H3>
<div class="topic">
ナビゲーションバーにドロップダウンメニューを追加します。<br/>
<table class="tblstyle">
<tr><td>dropdownTitle[入力]</td><td>ドロップダウンメニューのタイトル</td></tr>
</table>
</div>



<H3 ID="3.4.8">3.4.8 function changeDropDownTitle(dropdownTitle)</H3>
<div class="topic">
ナビゲーションバーのドロップダウンメニューのタイトルを変更します。<br/>
<table class="tblstyle">
<tr><td>dropdownTitle[入力]</td><td>ドロップダウンメニューのタイトル</td></tr>
</table>
</div>



<H3 ID="3.4.9">3.4.9 function getDropDownMenu(index)</H3>
<div class="topic">
ナビゲーションバーのドロップダウンメニューの要素名を取得します。<br/>
<table class="tblstyle">
<tr><td>index[入力]</td><td>取得する要素のindex</td></tr>
</table>
</div>



<H3 ID="3.4.10">3.4.10 function addDropDownMenu(index, menuTitle, func)</H3>
<div class="topic">
ナビゲーションバーのドロップダウンメニューに要素を追加します。<br/>
<table class="tblstyle">
<tr><td>index[入力]</td><td>追加先のindex</td></tr>
<tr><td>menuTitle[入力]</td><td>ドロップダウンメニューに追加する要素名</td></tr>
<tr><td>func[入力]</td><td>ドロップダウンメニューの要素選択時に実行する関数。括弧付きで指定する。</td></tr>
</table>
</div>



<H3 ID="3.4.11">3.4.11 function addClientMessage(code, msg)</H3>
<div class="topic">
クライアントメッセージを追加します。<br/>
<table class="tblstyle">
<tr><td>code[入力]</td><td>追加するメッセージのキー</td></tr>
<tr><td>msg[入力]</td><td>
  メッセージ。次の要素を含む情報を指定。<br/>
  <ul>
  <li>en<br/>英語メッセージ</li>
  <li>ja<br/>日本語メッセージ</li>
  </ul>
</td></tr>
</table>
</div>



<H3 ID="3.4.12">3.4.12 deleteClientMessage(code)</H3>
<div class="topic">
クライアントメッセージを削除します。<br/>
<table class="tblstyle">
<tr><td>code[入力]</td><td>削除するメッセージのキー</td></tr>
</table>
</div>



<H3 ID="3.4.13">3.4.13 function getClientMessageEn(code)</H3>
<div class="topic">
クライアントメッセージ(英語)を取得します。<br/>
<table class="tblstyle">
<tr><td>code[入力]</td><td>取得するメッセージのキー</td></tr>
</table>
</div>



<H3 ID="3.4.14">3.4.14 function getClientMessageJa(code)</H3>
<div class="topic">
クライアントメッセージ(日本語)を取得します。<br/>
<table class="tblstyle">
<tr><td>code[入力]</td><td>取得するメッセージのキー</td></tr>
</table>
</div>



<H3 ID="3.4.15">3.4.15 function setClientLanguage(lang)</H3>
<div class="topic">
クライアントメッセージの言語を指定します。<br/>
getClientMessage()で取得するメッセージがここで指定した言語に切り替わります。
<table class="tblstyle">
<tr><td>lang[入力]</td><td>getClientMessageで取得するメッセージの言語。0:英語, 1:日本語</td></tr>
</table>
</div>



<H3 ID="3.4.16">3.4.16 function getClientLanguage()</H3>
<div class="topic">
クライアントメッセージの言語を取得します。<br/>
0:英語, 1:日本語
</div>



<H3 ID="3.4.17">3.4.17 function getClientLanguage()</H3>
<div class="topic">
クライアントメッセージを指定した言語で取得します。<br/>
言語の指定は，setClientLanguage(lang)で行います。
</div>



<H3 ID="3.4.18">3.4.18 function displayAlertSuccess(parent, msg)</H3>
<div class="topic">
Successメッセージを表示します。<br/>
<table class="tblstyle">
<tr><td>parent[入力]</td><td>メッセージを挿入するdiv要素のID</td></tr>
<tr><td>msg[入力]</td><td>挿入するメッセージ</td></tr>
</table>
</div>



<H3 ID="3.4.19">3.4.19 function displayAlertDanger(parent, msg)</H3>
<div class="topic">
Dangerメッセージを表示します。<br/>
<table class="tblstyle">
<tr><td>parent[入力]</td><td>メッセージを挿入するdiv要素のID</td></tr>
<tr><td>msg[入力]</td><td>挿入するメッセージ</td></tr>
</table>
</div>



<H3 ID="3.4.20">3.4.20 function displayAlertWarning(parent, msg)</H3>
<div class="topic">
Warningメッセージを表示します。<br/>
<table class="tblstyle">
<tr><td>parent[入力]</td><td>メッセージを挿入するdiv要素のID</td></tr>
<tr><td>msg[入力]</td><td>挿入するメッセージ</td></tr>
</table>
</div>



<H3 ID="3.4.21">3.4.21 function displayAlertInfo(parent, msg)</H3>
<div class="topic">
Infoメッセージを表示します。<br/>
<table class="tblstyle">
<tr><td>parent[入力]</td><td>メッセージを挿入するdiv要素のID</td></tr>
<tr><td>msg[入力]</td><td>挿入するメッセージ</td></tr>
</table>
</div>



<H3 ID="3.4.22">3.4.22 function apiCall(method, url, request, keystring, targetFunc)</H3>
<div class="topic">
REST APIを呼び出します。<br/>
REST APIからレスポンスを受信後，指定した関数をコールバックします。<br/>
リクエスト送信後，500ミリ秒経過してもREST APIからのレスポンスがない場合，LOADING中を示すダイアログを表示します。<br/>
レスポンスの受信におけるタイムアウト時間は固定で10秒となります。<br/>
REST API呼び出しにおけるステータスおよびレスポンスデータは，stkcommon.jsのグローバル変数statusCode['キー名']およびresponseData['キー名']に格納されます。<br/>
REST API呼び出し時に，HTTPヘッダのAuthorizationには，"Bearer &lt;loginId&gt; &lt;loginPw&gt;"が指定されます。loginIdおよびloginPwは，showLoginModal関数で設定されます。<br/>
<table class="tblstyle">
<tr><td>method[入力]</td><td>HTTPメソッド。'GET', 'POST', 'DELETE', etc</td></tr>
<tr><td>url[入力]</td><td>URL</td></tr>
<tr><td>request[入力]</td><td>リクエストデータ</td></tr>
<tr><td>keystring[入力]</td><td>ステータスおよびレスポンスデータを識別するキー</td></tr>
<tr><td>targetFunc[入力]</td><td>レスポンス受信後に呼び出される関数。括弧および引数は指定できない。</td></tr>
</table>
</div>



<H3 ID="3.4.23">3.4.23 function MultiApiCall(contents, targetFunc)</H3>
<div class="topic">
複数のREST APIを同時に呼び出します。<br/>
すべてのREST APIからレスポンスを受信後，指定した関数をコールバックします。<br/>
リクエスト送信後，500ミリ秒経過してもすべてのREST APIからのレスポンスがない場合，LOADING中を示すダイアログを表示します。<br/>
レスポンスの受信におけるタイムアウト時間は固定で10秒となります。<br/>
REST API呼び出しにおけるステータスおよびレスポンスデータは，stkcommon.jsのグローバル変数statusCode['キー名']およびresponseData['キー名']に格納されます。<br/>
REST API呼び出し時に，HTTPヘッダのAuthorizationには，"Bearer &lt;loginId&gt; &lt;loginPw&gt;"が指定されます。loginIdおよびloginPwは，showLoginModal関数で設定されます。<br/>
<table class="tblstyle">
<tr><td>contents[入力]</td><td>
  複数のAPIを呼び出すための各種パラメータ。次の要素を含む情報を指定。
  <ul>
  <li>method<br/>HTTPメソッド。'GET', 'POST', 'DELETE', etc</li>
  <li>url<br/>URL</li>
  <li>request<br/>リクエストデータ</li>
  <li>keystring<br/>ステータスおよびレスポンスデータを識別するキー</li>
  </ul>
</td></tr>
<tr><td>targetFunc[入力]</td><td>レスポンス受信後に呼び出される関数。括弧および引数は指定できない。</td></tr>
</table>
</div>



</div>
</BODY>
</html>
