<!DOCTYPE html>

<html lang="ja">

<HEAD>
<title>StkWebApp</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<div id="container">
<H1>2. StkWebApp</H1>



<H2 ID="2.1">2.1 StkWebApp概要</H2>
<div class="topic">
StkWebAppは，REST APIを実現するためのクラスを提供します。<br/>
想定する主な使用方法としては，左図のように，HTTP Serverのリバースプロキシ機能を用いて，特定のURLに対するアクセスをStkWebAppにディスパッチする方法で，
これによりWeb BrowserからのリクエストをStkWebAppで処理します。<br/>
また，右図のようにCross DomainでのAPI呼び出しも想定しています。<br/>
StkWebAppは，リクエストデータとしてJSON形式のデータを受け付け，レスポンスデータとしてJSON形式のデータを返却します。<br/>
<img src="stkwebapp.gif" alt="Component relation"><br/>

StkWebAppは，内部的に下記のライブラリを利用します。<br/>
StkWebAppを使用するプログラムは，下記のライブラリも組み込む必要があります。<br/>
<ul>
<li>StkPl</li>
<li>StkSocket</li>
<li>StkThread</li>
<li>commonfunc/StkObject</li>
<li>commonfunc/StkStringParser</li>
<li>commonfunc/msgproc</li>
</ul>

</div><p>



<H2 ID="2.2">2.2 StkWebAppの構成</H2>
<div class="topic">
<p>
StkWebAppは以下のファイルから構成されます。
</p>
<table class="tblstyle">
<tr><td>stkwebapp.lib</td><td>StkWebAppの静的ライブラリです。</td></tr>
<tr><td>StkWebApp.h</td><td>StkWebAppの利用プログラムのためのヘッダファイルで，StkWebAppクラスを定義します。<br/>StkWebAppクラスは，REST APIを実現する基本的な機能を提供します。</td></tr>
<tr><td>StkWebAppExec.h</td><td>StkWebAppの利用プログラムのためのヘッダファイルで，StkWebAppExecクラスを定義します。<br/>StkWebAppExecクラスは，個々のREST APIの処理を実現するクラスの基底クラスです。</td></tr>
<tr><td>StkWebAppSend.h</td><td>HTTPクライアントのためのヘッダファイルで，StkWebAppSendクラスを定義します。</td></tr>
</table>
</div>



<H2 ID="2.3">2.3 クラス関連図</H2>
<div class="topic">
StkWebApp, StkWebAppExecおよびユーザープログラムの関連を以下に示します。<br/>
<img src="class.gif" alt="Class diagram"><br/>
StkWebAppは，StkWebAppクラスとStkWebAppExecクラスをUserProgramに提供します。
UserProgramは，StkWebAppインスタンスを生成するとともに，StkWebAppExecクラスの派生クラスからインスタンスを生成します。
StkWebAppExecクラスの派生クラスでは，個別のAPIの処理を定義します。<br/>
</div><p>



<H2 ID="2.4">2.4 StkWebAppクラス</H2>
<div class="topic">

<p>StkWebApp(int* TargetIds, int Count, const wchar_t* HostName, int TargetPort)</p>
StkWebAppインスタンスを生成すると同時に，以下を行います。<br/>
<ul>
<li>ワーカースレッドの生成および起動</li>
<li>指定したホスト名(IPアドレス)，ポート番号でListen</li>
</ul>
StkWebApp()の内部でStkThreadの生成および起動を行います。その際，SetStkThreadInterval()で1ミリ秒を指定しています。<br/>
<table class="tblstyle">
<tr><td>TargetIds[入力]</td><td>生成および起動するワーカースレッドのIDの配列</td></tr>
<tr><td>Count[入力]</td><td>TargetIds配列で指定した要素(ID)の数。指定可能な最大値は，登録可能なStkThreadの最大値と同じ</td></tr>
<tr><td>HostNamet[入力]</td><td>Listenするホスト名およびIPアドレス</td></tr>
<tr><td>TargetPort[入力]</td><td>Listenするポート番号</td></tr>
</table>
<hr/>

<p>~StkWebApp()</p>
以下を行うと同時に，StkWebAppインスタンスを消滅させます。<br/>
<ul>
<li>Listenしたソケットのクローズ</li>
<li>ワーカースレッドの停止および削除</li>
</ul><br/>
<hr/>

<p>int AddReqHandler(int Method, const wchar_t UrlPath[StkWebAppExec::URL_PATH_LENGTH], StkWebAppExec* HandlerObj)</p>
ある特定のメソッドおよびURLと関連付くリクエストを処理するハンドラを登録します。<br/>
<table class="tblstyle">
<tr><td>
Method[入力]</td><td>ハンドラの処理対象となるメソッド。以下の論理和を許す。<br/>
StkWebAppExec::STKWEBAPP_METHOD_UNDEFINED<br/>
StkWebAppExec::STKWEBAPP_METHOD_GET<br/>
StkWebAppExec::STKWEBAPP_METHOD_HEAD<br/>
StkWebAppExec::STKWEBAPP_METHOD_POST<br/>
StkWebAppExec::STKWEBAPP_METHOD_PUT<br/>
StkWebAppExec::STKWEBAPP_METHOD_DELETE<br/>
</td></tr>
<tr><td>UrlPath[入力]</td><td>ハンドラの処理対象となるURL。ワイルドカードとして$を指定可能。</td></tr>
<tr><td>HandlerObj[入力]</td><td>処理ハンドラとなるStkWebAppExecインスタンスのポインタ</td></tr>
<tr><td>戻り値</td><td>-1:すでにおなじメソッドおよびURLでハンドラが登録済<br/>-1以外:登録後のハンドラの数</td></tr>
</table>
<hr/>

<p>int DeleteReqHandler(int Method, const wchar_t UrlPath[StkWebAppExec::URL_PATH_LENGTH])</p>
登録済のハンドラを削除します。<br/>
<table class="tblstyle">
<tr><td>Method[入力]</td><td>削除するハンドラを登録したときに指定したメソッドおよびその論理和<br/></td></tr>
<tr><td>UrlPath[入力]</td><td>削除するハンドラを登録したときに指定したURL</td></tr>
<tr><td>戻り値</td><td>-1:指定したハンドラが登録されていない<br/>-1以外:削除後のハンドラの数</td></tr>
</table>
<hr/>

<p>void TheLoop()</p>
URL"/service/"に"{ "Operation" : "Stop" }"がPOSTされるまで，本メソッドから処理が戻りません。<br/>
<hr/>

<p>int GetSendBufSize()</p>
送信用データ一時格納用領域のサイズを返します。<br/>
<table class="tblstyle">
<tr><td>戻り値</td><td>送信用データ一時格納用領域のサイズ</td></tr>
</table>
<hr/>

<p>void SetSendBufSize(int Size)</p>
送信用データ一時格納用領域のサイズを変更します。<br/>デフォルトは1,000,000バイトです。<br/>
<table class="tblstyle">
<tr><td>Size[入力]</td><td>送信用データ一時格納用領域のサイズ<br/></td></tr>
</table>
<hr/>

<p>int GetRecvBufSize()</p>
受信用データ一時格納用領域のサイズを返します。<br/>
<table class="tblstyle">
<tr><td>戻り値</td><td>受信用データ一時格納用領域のサイズ</td></tr>
</table>
<hr/>

<p>void SetRecvBufSize(int Size)</p>
受信用データ一時格納用領域のサイズを変更します。<br/>デフォルトは1,000,000バイトです。<br/>
<table class="tblstyle">
<tr><td>Size[入力]</td><td>受信用データ一時格納用領域のサイズ<br/></td></tr>
</table>
<hr/>

<p>int GetTimeoutInterval()</p>
受信処理は何らかのデータを受信した後，そのデータが完結していない場合(データサイズがHTTPヘッダのContent-Lengthに達していない場合)，次のデータの受信を待ちます。
受信待ち処理のタイムアウト時間をミリ秒で返します。<br/>
<table class="tblstyle">
<tr><td>戻り値</td><td>タイムアウト時間(ミリ秒)</td></tr>
</table>
<hr/>

<p>void SetTimeoutInterval(int Interval)</p>
受信処理は何らかのデータを受信した後，そのデータが完結していない場合(データサイズがHTTPヘッダのContent-Lengthに達していない場合)，次のデータの受信を待ちます。
受信待ち処理のタイムアウト時間をミリ秒で設定します。<br/>デフォルト値は3,000ミリ秒です。<br/>
<table class="tblstyle">
<tr><td>Interval[入力]</td><td>タイムアウト時間(ミリ秒)<br/></td></tr>
</table>
<hr/>

</div><p>



<H2 ID="2.5">2.5 StkWebAppExecクラス</H2>
<div class="topic">
<p>virtual StkObject* Execute(StkObject* ReqObj, int Method, wchar_t UrlPath[StkWebAppExec::URL_PATH_LENGTH], int* ResultCode, wchar_t* HttpHeader) = 0</p>
StkWebAppExecクラスの派生クラスが実装するメソッドです。純粋仮想関数として定義されています。<br/>
<table class="tblstyle">
<tr><td>ReqObj[入力]</td><td>クライアントがリクエストとして与えたJSON形式のデータをStkObjectに変換したもの<br/></td></tr>
<tr><td>Method[入力]</td><td>クライアントがリクエストとして与えたメソッド</td></tr>
<tr><td>UrlPath[入力]</td><td>クライアントがリクエストとして与えたURL。URLデコード（パーセントデコード）はされていない。</td></tr>
<tr><td>ResultCode[出力]</td><td>クライアントに返すステータスコード</td></tr>
<tr><td>HttpHeader[出力]</td><td>リクエストのHTTPヘッダが格納される。</td></tr>
<tr><td>戻り値</td><td>クライアントに返すデータ。最終的にJSON形式のデータに変換し，クライアントに返却する。</td></tr>
</table>
<hr/>
</div><p>



<H2 ID="2.6">2.6 StkWebAppSendクラス</H2>
<div class="topic">

<p>StkWebAppSend(int TargetId, const wchar_t* HostNameOrIpAddr, int PortNum)</p>
コンストラクタ。<br/>
<table class="tblstyle">
<tr><td>TargetId[入力]</td><td>コネクションを特定するID。StkWebAppのTargetIdsで指定したIDと異なる値を指定する。<br/></td></tr>
<tr><td>HostNameOrIpAddr[入力]</td><td>接続先のIPアドレスまたはホスト名<br/></td></tr>
<tr><td>PortNum[入力]</td><td>接続先のポート番号<br/></td></tr>
</table>
<hr/>

<p>~StkWebAppSend()</p>
デストラクタ。<br/>
<hr/>

<p>int GetSendBufSize()</p>
送信用データ一時格納用領域のサイズを返します。<br/>
<table class="tblstyle">
<tr><td>戻り値</td><td>送信用データ一時格納用領域のサイズ</td></tr>
</table>
<hr/>

<p>void SetSendBufSize(int Size)</p>
送信用データ一時格納用領域のサイズを変更します。<br/>デフォルトは1,000,000バイトです。<br/>
<table class="tblstyle">
<tr><td>Size[入力]</td><td>送信用データ一時格納用領域のサイズ<br/></td></tr>
</table>
<hr/>

<p>int GetRecvBufSize()</p>
受信用データ一時格納用領域のサイズを返します。<br/>
<table class="tblstyle">
<tr><td>戻り値</td><td>受信用データ一時格納用領域のサイズ</td></tr>
</table>
<hr/>

<p>void SetRecvBufSize(int Size)</p>
受信用データ一時格納用領域のサイズを変更します。<br/>デフォルトは1,000,000バイトです。<br/>
<table class="tblstyle">
<tr><td>Size[入力]</td><td>受信用データ一時格納用領域のサイズ<br/></td></tr>
</table>
<hr/>

<p>int GetTimeoutInterval()</p>
受信処理は何らかのデータを受信した後，そのデータが完結していない場合(データサイズがHTTPヘッダのContent-Lengthに達していない場合)，次のデータの受信を待ちます。
受信待ち処理のタイムアウト時間をミリ秒で返します。<br/>
<table class="tblstyle">
<tr><td>戻り値</td><td>タイムアウト時間(ミリ秒)</td></tr>
</table>
<hr/>

<p>void SetTimeoutInterval(int Interval)</p>
受信処理は何らかのデータを受信した後，そのデータが完結していない場合(データサイズがHTTPヘッダのContent-Lengthに達していない場合)，次のデータの受信を待ちます。
受信待ち処理のタイムアウト時間をミリ秒で設定します。<br/>デフォルト値は3,000ミリ秒です。<br/>
<table class="tblstyle">
<tr><td>Interval[入力]</td><td>タイムアウト時間(ミリ秒)<br/></td></tr>
</table>
<hr/>

<p>void SetTimeoutInterval(int Interval)</p>
受信処理は何らかのデータを受信した後，そのデータが完結していない場合(データサイズがHTTPヘッダのContent-Lengthに達していない場合)，次のデータの受信を待ちます。
受信待ち処理のタイムアウト時間をミリ秒で設定します。<br/>デフォルト値は3,000ミリ秒です。<br/>
<table class="tblstyle">
<tr><td>Interval[入力]</td><td>タイムアウト時間(ミリ秒)<br/></td></tr>
</table>
<hr/>

<p>void SetAutholization(const char* Auth)</p>
リクエストヘッダのAuthorizationに認証用トークン指定します。<br/>
<table class="tblstyle">
<tr><td>Auth[入力]</td><td>リクエストヘッダのAuthorizationに指定する認証用トークン<br/></td></tr>
</table>
<hr/>

<p>StkObject* SendRequestRecvResponse(int Method, const char* Url, StkObject* ReqObj, int* ResultCode)</p>
HTTP Serverにリクエストを送信し，HTTP Serverからのレスポンスを返却します。<br/>
送信時にHTTPのリクエストヘッダには，以下が指定されます。<br/>
<ul>
<li>Content-Length: xxx (リクエストボディのサイズ)</li>
<li>Content-Type: application/json</li>
<li>Host: yyy (接続先のホスト名またはIPアドレス)</li>
<li>Authorization: zzz (SetAuthorizationで指定した認証用トークン。)</li>
<li>Date: aaa (リクエストが送信された時刻)</li>
</ul>
<table class="tblstyle">
<tr><td>Method[入力]</td><td>HTTPリクエストのメソッド。以下の何れかを指定する。<br/>
StkWebAppSend::STKWEBAPP_METHOD_UNDEFINED<br/>
StkWebAppSend::STKWEBAPP_METHOD_GET<br/>
StkWebAppSend::STKWEBAPP_METHOD_HEAD<br/>
StkWebAppSend::STKWEBAPP_METHOD_POST<br/>
StkWebAppSend::STKWEBAPP_METHOD_PUT<br/>
StkWebAppSend::STKWEBAPP_METHOD_DELETE<br/>
<tr><td>Url[入力]</td><td>接続対象のURL。IPアドレスまたはホスト名，およびポート番号は含まない。<br/></td></tr>
<tr><td>ReqObj[入力]</td><td>リクエストデータ。JSONに変換後送信される。<br/></td></tr>
<tr><td>ResultCode[出力]</td><td>HTTPレスポンスのステータスコード<br/></td></tr>
<tr><td>戻り値</td><td>HTTPレスポンスのデータ<br/></td></tr>
</table>
<hr/>

</div><p>



<H2 ID="2.7">2.7 異常時の振る舞い</H2>
<div class="topic">
StkWebAppは，リクエストの不正や内部処理の異常を検知した場合，エラーコードおよびエラーメッセージを梱包したレスポンスを返します。<br/>
レスポンスは以下のように定義されます。<br/>
<p>
<table class="tblstyle"><tr>
<td><pre><code>
{
  "Code":1234,
  "MsgEng":"abc",
  "MsgJpn":"あいう"
}
</code></pre></td>
</tr></table><br/>
既定のエラーコードおよびエラーメッセージとして以下が定義されています。<br/>
<table class="tblstyle">
<tr><th>HTTP Status Code</th><th>Code</th><th>エラー詳細</th></tr>
<tr><td>404</td><td>1001</td><td>クライアントからのリクエストに対応するAPIは定義されていません。</td></tr>
<tr><td>400</td><td>1002</td><td>リクエストがJSONではないデータを含んでいるかHTTPヘッダのContent-Typeがapplication/jsonではありません。</td></tr>
<tr><td>400</td><td>1003</td><td>HTTPヘッダサイズが許容できる上限を超えました。</td></tr>
<tr><td>400</td><td>1004</td><td>URL"/service/"にPOSTされたリクエストは不正です。</td></tr>
<tr><td>400</td><td>1005</td><td>不正なリクエストを受信しました。リクエストが壊れているおそれがあります。</td></tr>
<tr><td>500</td><td>1006</td><td>データサイズが送信できるサイズの上限を超えました。</td></tr>
</table><br/>
</div><p>



</div>
</BODY>
</html>
