<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<style type="text/css">
<!--
.spc { margin-left: 2em; margin-right: 0em; }
-->
</style>

<div id="container">

<H2>4.13 ColumnDataBin</H2>
StkDataのレコード内バイナリ型カラムにアクセスするためのクラス（データモデル）です。
ColumnDataクラスの派生クラスとして定義されます。

<H3>4.13.1 ColumnDataBinのメンバ変数</H3>
private<BR>
<TABLE BORDER="1">
<TR><TD>BYTE*</TD><TD>m_Value</TD><TD>バイナリ型カラムのデータ</TD></TR>
</TABLE><P>

<H3>4.13.2 ColumnDataBinの関数</H3>
(1) ColumnDataBin((const wchar_t* ColumnName, const char* Val, int Length)<BR>
<div class=spc>
コンストラクタ。Lengthバイトのサイズをもつバイナリ型データm_Valueを生成し，Valの値をコピーする。
<TABLE BORDER="1">
<TR><TD>ColumnName</TD><TD>カラム名</TD></TR>
<TR><TD>Val</TD><TD>バイナリ型カラムデータへのポインタ</TD></TR>
<TR><TD>Length</TD><TD>コピーするValのデータのサイズ（バイト数）。実存するカラムのサイズ以下にする必要がある。</TD></TR>
</TABLE>
</div><P>

(2) ColumnDataBin(const wchar_t* ColumnName, const char* Val, int Length, int CompOpe)<BR>
<div class=spc>
コンストラクタ。Lengthバイトのサイズをもつバイナリ型データm_Valueを生成し，Valの値をコピーする。
<TABLE BORDER="1">
<TR><TD>ColumnName</TD><TD>カラム名</TD></TR>
<TR><TD>Val</TD><TD>バイナリ型カラムデータへのポインタ</TD></TR>
<TR><TD>Length</TD><TD>コピーするValのデータのサイズ（バイト数）。実存するカラムのサイズ以下にする必要がある。</TD></TR>
<TR><TD>CompOpe</TD><TD>比較種別</TD></TR>
</TABLE>
</div><P>

(3) virtual ~ColumnDataBin()<BR>
<div class=spc>
デストラクタ。m_Valueの領域を開放する。
</div><P>

(4) BYTE* GetValue()<BR>
<div class=spc>
バイナリ型カラムのデータを取得する。
<TABLE BORDER="1">
<TR><TD>戻り値</TD><TD>バイナリ型カラムデータへのポインタ</TD></TR>
</TABLE>
</div><P>

(5) int GetLength()<BR>
<div class=spc>
設定されたデータのサイズを取得する。
<TABLE BORDER="1">
<TR><TD>戻り値</TD><TD>設定されたデータのサイズ（バイト数）</TD></TR>
</TABLE>
</div><P>


</div>
</BODY>
