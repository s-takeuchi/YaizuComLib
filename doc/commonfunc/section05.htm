<!DOCTYPE html>
<html lang="ja">

<HEAD>
<title>StkStringParser</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<link rel="stylesheet" href="./style.css" type="text/css"/>
</HEAD>

<BODY>
<div id="container">
<H1>5. StkStringParser</H1>

<H2 ID="5.1">5.1 StkStringParser概要</H2>
<div class="topic">
与えられた文字列を構文解析し，最大4個の文字列を取得します。<br>
</div><p>



<H2 ID="5.2">5.2 StkStringParserの使用方法</H2>
<div class="topic">
StkStringParserの機能を利用するために，クライアントプログラムは，
以下の.hファイル，.libファイルを事前に参照可能な状態にしておく必要があります。<p>
<table class="tblstyle">
<tr><td>.hファイル</td><td>StkStringParser.h</td></tr>
<tr><td>.libファイル</td><td>commonfunc.lib</td></tr>
</table><p>
</div><p>



<H2 ID="5.3">5.3 API一覧</H2>
<div class="topic">
StkStringParserクラスが提供するAPI一覧を以下に示します。<br>
<table class="tblstyle">
<tr><td>static int ParseInto1Param(const wchar_t*, const wchar_t*, wchar_t, wchar_t*)</td><td>与えられた文字列を構文解析し，最大1個の文字列を取得します。</td></tr>
<tr><td>static int ParseInto2Params(const wchar_t*, const wchar_t*, wchar_t, wchar_t*, wchar_t*)</td><td>与えられた文字列を構文解析し，最大2個の文字列を取得します。</td></tr>
<tr><td>static int ParseInto3Params(const wchar_t*, const wchar_t*, wchar_t, wchar_t*, wchar_t*, wchar_t*)</td><td>与えられた文字列を構文解析し，最大3個の文字列を取得します。</td></tr>
<tr><td>static int ParseInto4Params(const wchar_t*, const wchar_t*, wchar_t, wchar_t*, wchar_t*, wchar_t*, wchar_t*)</td><td>与えられた文字列を構文解析し，最大4個の文字列を取得します。</td></tr>
</table><p>
</div><p>



<H2 ID="5.4">5.4 int ParseInto1Param(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, -1, NULL, -1, NULL, -1, NULL, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.5">5.5 int ParseInto2Params(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, wchar_t* OutStr2)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, -1, OutStr2, -1, NULL, -1, NULL, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.6">5.6 int ParseInto3Params(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, wchar_t* OutStr2, wchar_t* OutStr3)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, -1, OutStr2, -1, OutStr3, -1, NULL, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.7">5.7 int ParseInto4Params(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, wchar_t* OutStr2, wchar_t* OutStr3, wchar_t* OutStr4)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, -1, OutStr2, -1, OutStr3, -1, OutStr4, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.8">5.8 int ParseInto1Param(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, int OutStr1Len)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, OutStr1Len, NULL, -1, NULL, -1, NULL, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.9">5.9 int ParseInto2Params(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, int OutStr1Len, wchar_t* OutStr2, int OutStr2Len)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, OutStr1Len, OutStr2, OutStr2Len, NULL, -1, NULL, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.10">5.10 int ParseInto3Params(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, int OutStr1Len, wchar_t* OutStr2, int OutStr2Len, wchar_t* OutStr3, int OutStr3Len)</H2>
<div class="topic">
内部処理として，ParseInto4Params(OriginStr, Format, Target, OutStr1, OutStr1Len, OutStr2, OutStr2Len, OutStr3, OutStr3Len, NULL, -1) を呼び出します。<br>
詳細は，ParseInto4Paramsを参照のこと。
</div><p>



<H2 ID="5.11">5.11 int ParseInto4Params(const wchar_t* OriginStr, const wchar_t* Format, wchar_t Target, wchar_t* OutStr1, int OutStr1Len, wchar_t* OutStr2, int OutStr2Len, wchar_t* OutStr3, int OutStr3Len, wchar_t* OutStr4, int OutStr4Len)</H2>
<div class="topic">
与えられた文字列を構文解析し，最大4個の文字列を取得します。<br>
<table class="tblstyle">
<tr><td>OriginStr[入力]</td><td>構文解析を行う対象の文字列。</td></tr>
<tr><td>Format[入力]</td><td>OriginStrを検索するための文字列。Targetに示す文字を1個から最大4個まで含んでいる必要がある。</td></tr>
<tr><td>Target[入力]</td><td>OriginStrを検索し文字列を取得するためにFormat中に存在する文字。</td></tr>
<tr><td>OutStr1[出力]</td><td>Format内に存在する1番目のTargetと対応する文字列を取得する。NULLを指定した場合は取得しない。</td></tr>
<tr><td>OutStr1Len[入力]</td><td>OutStr1のサイズ(ワード数)を指定する。-1は無制限を示す。</td></tr>
<tr><td>OutStr2[出力]</td><td>Format内に存在する2番目のTargetと対応する文字列を取得する。NULLを指定した場合は取得しない。</td></tr>
<tr><td>OutStr2Len[入力]</td><td>OutStr2のサイズ(ワード数)を指定する。-1は無制限を示す。</td></tr>
<tr><td>OutStr3[出力]</td><td>Format内に存在する3番目のTargetと対応する文字列を取得する。NULLを指定した場合は取得しない。</td></tr>
<tr><td>OutStr3Len[入力]</td><td>OutStr3のサイズ(ワード数)を指定する。-1は無制限を示す。</td></tr>
<tr><td>OutStr4[出力]</td><td>Format内に存在する4番目のTargetと対応する文字列を取得する。NULLを指定した場合は取得しない。</td></tr>
<tr><td>OutStr4Len[入力]</td><td>OutStr4のサイズ(ワード数)を指定する。-1は無制限を示す。</td></tr>
<tr><td>[戻り値]</td><td>Result code<br/>
0:Format内に存在するTargetの数と取得できたOutStrの数が一致しない(FormatがTargetを含まず，且つOriginStrと文字列が一致しない場合も0が返る),<br/>
-1:異常終了 (OriginStrがNULL, FormatがNULL, またはFormatがOriginStrよりも長い文字列となっている),<br/>
1:Format内に存在するTargetの数と取得できたOutStrの数が一致する(FormatがTargetを含まず，且つOriginStrと文字列が一致する場合も1が返る)<br/>
</td></tr>
</table>
</div><p>



</div>
</BODY>

</html>
