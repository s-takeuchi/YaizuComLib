<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<div id="container">
<H1>4. StkObject</H1>

<H2 ID="4.1">4.1 StkObject概要</H2>
<div class="topic">
StkObjectは，XMLまたはJSON形式のデータを処理するAPIを提供します。<br>
提供するAPIには，以下に示すものがあります。<br>
<ul>
<li>XMLまたはJSON形式のデータをStkObjectインスタンスの集合に変換するAPI</li>
<li>StkObjectインスタンスの集合をXMLまたはJSON形式のデータに変換するAPI</li>
</ul>
<p>
StkObjectインスタンスは，下図に示すように，属性保持領域(Attribute)および要素保持領域(Element)が子のStkObjectインスタンスを梱包する入れ子構造を成すことができます。<br/>
すべてのStkObjectインスタンスは，最上位のノードとなるトップノードを除いて親のインスタンスと関連を持ちます。また，あるStkObjectインスタンスが異なる複数の親を持つことはできません。<br/>
<img src="stkobject-abst-s.jpg"/><br/>
また，StkObjectインスタンスは，値（整数や単精度浮動小数点数，文字列）を保持することができます。<br/>
StkObjectインスタンスには以下の型があります。<br/>
<ul>
<li>コンテナ型</li>
コンテナ型のStkObjectインスタンスは，値を保持することはできませんが，属性保持領域および要素保持領域に子のStkObjectインスタンスを梱包することができます。
<li>整数型</li>
整数値を保持することができます。属性保持領域および要素保持領域に子のStkObjectインスタンスを梱包することはできません。
<li>単精度浮動小数点数型</li>
単精度浮動小数点数値を保持することができます。属性保持領域および要素保持領域に子のStkObjectインスタンスを梱包することはできません。
<li>文字列型</li>
文字列を保持することができます。属性保持領域および要素保持領域に子のStkObjectインスタンスを梱包することはできません。
</ul><br/>
属性保持領域(Attribute)および要素保持領域(Element)に定義可能なStkObjectインスタンスの型は，下表のとおりとなります。<br/>
<table class="tblstyle">
<tr><td></td><td>属性保持領域(Attribute)</td><td>要素保持領域(Element)</td></tr>
<tr><td>コンテナ型</td><td>不可</td><td>可</td></tr>
<tr><td>整数型</td><td>可</td><td>可</td></tr>
<tr><td>単精度浮動小数点数型</td><td>可</td><td>可</td></tr>
<tr><td>文字列型</td><td>可</td><td>可</td></tr>
</table>
</p>
</div><p>



<H2 ID="4.2">4.2 StkObjectの使用方法</H2>
<div class="topic">
StkObjectの機能を利用するために，クライアントプログラムは，以下の.hファイル，.libファイルを事前に参照可能な状態にしておく必要があります。<p>
<table class="tblstyle">
<tr><td>.hファイル</td><td>StkObject.h</td></tr>
<tr><td>.libファイル</td><td>commonfunc.lib</td></tr>
</table><p>
</div><p>



<H2 ID="4.3">4.3 API一覧</H2>
<div class="topic">
StkObjectクラスが提供するAPI一覧を以下に示します。<br>
<table class="tblstyle">
<tr><td>StkObject(const wchar_t*)</td><td>コンストラクタ。コンテナ型インスタンス（値を持たないインスタンス）を生成します。</td></tr>
<tr><td>StkObject(const wchar_t*, int)</td><td>コンストラクタ。整数型インスタンス（int型の値を持つインスタンス）を生成します。</td></tr>
<tr><td>StkObject(const wchar_t*, float)</td><td>コンストラクタ。単精度浮動小数点数型インスタンス（float型の値を持つインスタンス）を生成します。</td></tr>
<tr><td>StkObject(const wchar_t*, const wchar_t*)</td><td>コンストラクタ。文字列型インスタンス（文字列型の値を持つインスタンス）を生成します。</td></tr>
<tr><td>virtual ~StkObject()</td><td>デストラクタ。</td></tr>
<tr><td>StkObject* Clone()</td><td>StkObjectインスタンスのクローンを生成します。</td></tr>
<tr><td>bool Equals(StkObject*)</td><td>指定したインスタンスとの同一性を確認します。</td></tr>
<tr><td>StkObject* Contains(StkObject*)</td><td>指定したインスタンスが含まれるかどうかを確認します。</td></tr>
<tr><td>int GetArrayLength()</td><td>同じ階層にある後続の属性または要素の数を返します。</td></tr>
<tr><td>int GetChildElementCount()</td><td>ひとつ下の階層にある要素の数を返します。</td></tr>
<tr><td>int GetAttributeCount()</td><td>属性として存在するStkObjectインスタンスの数を返します。</td></tr>
<tr><td>wchar_t* GetName()</td><td>StkObjectインスタンスの名称を返します。</td></tr>
<tr><td>int GetType()</td><td>StkObjectインスタンスの型を返します。</td></tr>
<tr><td>int GetIntValue()</td><td>整数型のStkObjectインスタンスの値を返します。</td></tr>
<tr><td>float GetFloatValue()</td><td>単精度浮動小数点数型のStkObjectインスタンスの値を返します。</td></tr>
<tr><td>wchar_t* GetStringValue()</td><td>文字列型のStkObjectインスタンスの値を返します。</td></tr>
<tr><td>void SetIntValue(int)</td><td>整数型のStkObjectインスタンスに値を設定します。</td></tr>
<tr><td>void SetFloatValue(float)</td><td>単精度浮動小数点数型のStkObjectインスタンスに値を設定します。</td></tr>
<tr><td>void SetStringValue(const wchar_t*)</td><td>文字列型のStkObjectインスタンスに値を設定します。</td></tr>
<tr><td>StkObject* GetFirstChildElement()</td><td>子のStkObjectインスタンスのうち，一番先頭のインスタンスを返します。</td></tr>
<tr><td>StkObject* GetLastChildElement()</td><td>子のStkObjectインスタンスのうち，一番最後のインスタンスを返します。</td></tr>
<tr><td>StkObject* GetFirstAttribute()</td><td>属性であるStkObjectインスタンスのうち，一番先頭のインスタンスを返します。</td></tr>
<tr><td>StkObject* GetLastAttribute()</td><td>属性であるStkObjectインスタンスのうち，一番最後のインスタンスを返します。</td></tr>
<tr><td>StkObject* GetNext()</td><td>同じ階層に存在するStkObjectインスタンスのうち，次のインスタンスを返します。</td></tr>
<tr><td>void AppendChildElement(StkObject*)</td><td>要素保持領域に子のStkObjectインスタンスを追加します。</td></tr>
<tr><td>void AppendAttribute(StkObject*)</td><td>属性としてStkObjectインスタンスを追加します。</td></tr>
<tr><td>void ToXml(std::wstring*)</td><td>StkObjectインスタンスからXMLを生成します。</td></tr>
<tr><td>void ToJson(std::wstring*)</td><td>StkObjectインスタンスからJSONを生成します。</td></tr>
<tr><td>static StkObject* CreateObjectFromXml(const wchar_t*, int*)</td><td>XMLから入れ子構造のStkObjectインスタンスを生成します。</td></tr>
<tr><td>static StkObject* CreateObjectFromJson(const wchar_t*, int*)</td><td>JSONから入れ子構造のStkObjectインスタンスを生成します。</td></tr>
<tr><td>static int Analyze(const wchar_t*)</td><td>指定した文字列がXMLかJSONかを判定します。</td></tr>
</table><p>
</div><p>



<H2 ID="4.4">4.4 StkObject(const wchar_t* Name)</H2>
<div class="topic">
コンストラクタ。コンテナ型インスタンス（値を持たないインスタンス）を生成します。<br>
StkObjectインスタンスの型は，STKOBJECT_ELEMENTとなります。<br>
<table class="tblstyle">
<tr><td>Name[入力]</td><td>StkObjectインスタンスの名称</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.5">4.5 StkObject(const wchar_t* Name, int IntValue)</H2>
<div class="topic">
コンストラクタ。整数型インスタンス（int型の値を持つインスタンス）を生成します。<br>
StkObjectインスタンスの型は，STKOBJECT_UNKW_INTとなります。<br>
<table class="tblstyle">
<tr><td>Name[入力]</td><td>StkObjectインスタンスの名称</td></tr>
<tr><td>IntValue[入力]</td><td>StkObjectインスタンスに設定する整数値</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.6">4.6 StkObject(const wchar_t* Name, float FloatValue)</H2>
<div class="topic">
コンストラクタ。単精度浮動小数点数型インスタンス（float型の値を持つインスタンス）を生成します。<br>
StkObjectインスタンスの型は，STKOBJECT_UNKW_FLOATとなります。<br>
<table class="tblstyle">
<tr><td>Name[入力]</td><td>StkObjectインスタンスの名称</td></tr>
<tr><td>FloatValue[入力]</td><td>StkObjectインスタンスに設定する単精度浮動小数点数値</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.7">4.7 StkObject(const wchar_t* Name, const wchar_t* StringValue)</H2>
<div class="topic">
コンストラクタ。文字列型インスタンス（文字列型の値を持つインスタンス）を生成します。<br>
StkObjectインスタンスの型は，STKOBJECT_UNKW_STRINGとなります。<br>
<table class="tblstyle">
<tr><td>Name[入力]</td><td>StkObjectインスタンスの名称</td></tr>
<tr><td>StringValue[入力]</td><td>StkObjectインスタンスに設定する文字列。本API内でStringValueのコピーが生成，設定されるため，API呼び出し後StringValueはdelete可能。</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.8">4.8 ~StkObject()</H2>
<div class="topic">
デストラクタ。<br>
関連する（入れ子となっている）すべてのStkObjectインスタンスを削除します。<br>
StkObjectインスタンスをdeleteするときは，必ずトップノードとなるStkObjectを削除しなければなりません。
子のStkObjectインスタンスをdeleteした場合，内部的な親子の参照関係に矛盾が発生し，動作に不具合を生じさせます。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.9">4.9 StkObject* Clone()</H2>
<div class="topic">
StkObjectインスタンスのクローンを生成します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>生成されたStkObjectインスタンスのポインタ</td></tr>
</table>
</div><p>



<H2 ID="4.10">4.10 bool Equals(StkObject* StkObj)</H2>
<div class="topic">
指定したインスタンスとの同一性を確認します。<br>
以下の条件のすべてが一致するとき，指定したインスタンスとAPI呼び出し先インスタンスには同一性があると判断されます。
<ul>
<li>指定したインスタンスおよびその子孫のインスタンスの構造（属性および要素の入れ子構造）が，API呼び出し先インスタンスのそれと一致する。
<li>指定したインスタンスおよびその子孫のインスタンスの名称が，API呼び出し先インスタンスのそれと一致する。
<li>指定したインスタンスおよびその子孫のインスタンスの値が，API呼び出し先インスタンスのそれと一致する。
</ul><br>
<table class="tblstyle">
<tr><td>StkObj[入力]</td><td>比較するStkObjectインスタンス</td></tr>
<tr><td>[戻り値]</td><td>true:同一性がある, false:同一性がない</td></tr>
</table>
</div><p>



<H2 ID="4.11">4.11 StkObject* Contains(StkObject* StkObj)</H2>
<div class="topic">
指定したインスタンスが含まれるかどうかを確認します。<br>
指定したインスタンスがAPI呼び出し先のインスタンスの一部を構成している場合，そのポインタを返します。<br>
<table class="tblstyle">
<tr><td>StkObj[入力]</td><td>確認対象となるStkObjectインスタンス</td></tr>
<tr><td>[戻り値]</td><td>指定したインスタンスがAPI呼び出し先のインスタンスの一部を構成している場合，そのポインタが返る。そうでない場合，NULLが返る。</td></tr>
</table>
</div><p>



<H2 ID="4.12">4.12 int GetArrayLength()</H2>
<div class="topic">
同じ階層にある後続の属性または要素の数を返します。<br>
属性保持領域および要素保持領域は，Arrayとして子供のStkObjectインスタンスを保持します。<br>
下図においてAPI呼び出し先のインスタンスがA-1の場合，A-1に加えてA-2, A-3が同じ階層にある後続の属性となるため，GetArrayLength()は3を返します。
API呼び出し先のインスタンスがE-3の場合，E-3以外に同じ階層に後続の要素はないため，GetArrayLength()は1を返します。<br>
<img src="stkobject-array-s.jpg"><br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>同じ階層にある後続の属性または要素の数</td></tr>
</table>
</div><p>



<H2 ID="4.13">4.13 int GetChildElementCount()</H2>
<div class="topic">
ひとつ下の階層にある要素の数を返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>ひとつ下の階層にある要素の数</td></tr>
</table>
</div><p>



<H2 ID="4.14">4.14 int GetAttributeCount()</H2>
<div class="topic">
属性として存在するStkObjectインスタンスの数を返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>属性として存在するStkObjectインスタンスの数</td></tr>
</table>
</div><p>



<H2 ID="4.15">4.15 wchar_t* GetName()</H2>
<div class="topic">
StkObjectインスタンスの名称を返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>StkObjectインスタンスの名称</td></tr>
</table>
</div><p>



<H2 ID="4.16">4.16 int GetType()</H2>
<div class="topic">
StkObjectインスタンスの型を返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>StkObjectインスタンスの型。以下の何れか。<br>
<ul>
<li>STKOBJECT_UNKW_INT<br>コンテナ型StkObjectインスタンスに梱包されていない整数型StkObjectインスタンス</li>
<li>STKOBJECT_UNKW_FLOAT<br>コンテナ型StkObjectインスタンスに梱包されていない単精度浮動小数点数型StkObjectインスタンス</li>
<li>STKOBJECT_UNKW_STRING<br>コンテナ型StkObjectインスタンスに梱包されていない文字列型StkObjectインスタンス</li>
<li>STKOBJECT_ATTR_INT<br>コンテナ型StkObjectインスタンスの属性保持領域に格納されている整数型StkObjectインスタンス</li>
<li>STKOBJECT_ATTR_FLOAT<br>コンテナ型StkObjectインスタンスの属性保持領域に格納されている単精度浮動小数点数型StkObjectインスタンス</li>
<li>STKOBJECT_ATTR_STRING<br>コンテナ型StkObjectインスタンスの属性保持領域に格納されている文字列型StkObjectインスタンス</li>
<li>STKOBJECT_ELEMENT<br>コンテナ型StkObjectインスタンス</li>
<li>STKOBJECT_ELEM_INT<br>コンテナ型StkObjectインスタンスの要素保持領域に格納されている整数型StkObjectインスタンス</li>
<li>STKOBJECT_ELEM_FLOAT<br>コンテナ型StkObjectインスタンスの要素保持領域に格納されている単精度浮動小数点数型StkObjectインスタンス</li>
<li>STKOBJECT_ELEM_STRING<br>コンテナ型StkObjectインスタンスの要素保持領域に格納されている文字列型StkObjectインスタンス</li>
</ul> 
</td></tr>
</table>
</div><p>



<H2 ID="4.17">4.17 int GetIntValue()</H2>
<div class="topic">
整数型のStkObjectインスタンスの値を返します。<br>
整数型ではないStkObjectインスタンスに対して本APIを呼び出した場合，0を返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>整数型のStkObjectインスタンスの値</td></tr>
</table>
</div><p>



<H2 ID="4.18">4.18 float GetFloatValue()</H2>
<div class="topic">
単精度浮動小数点数型のStkObjectインスタンスの値を返します。<br>
単精度浮動小数点数型ではないStkObjectインスタンスに対して本APIを呼び出した場合，0.0fを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>単精度浮動小数点数型のStkObjectインスタンスの値</td></tr>
</table>
</div><p>



<H2 ID="4.19">4.19 wchar_t* GetStringValue()</H2>
<div class="topic">
文字列型のStkObjectインスタンスの値を返します。<br>
文字列型ではないStkObjectインスタンスに対して本APIを呼び出した場合，NULLを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>文字列型のStkObjectインスタンスの値</td></tr>
</table>
</div><p>



<H2 ID="4.20">4.20 void SetIntValue(int IntValue)</H2>
<div class="topic">
整数型のStkObjectインスタンスに値を設定します。<br>
整数型ではないStkObjectインスタンスに対して本APIを呼び出した場合，要求は無視されます。<br>
<table class="tblstyle">
<tr><td>IntValue[入力]</td><td>整数型のStkObjectインスタンスに設定する値</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.21">4.21 void SetFloatValue(float FloatValue)</H2>
<div class="topic">
単精度浮動小数点数型のStkObjectインスタンスに値を設定します。<br>
単精度浮動小数点数型ではないStkObjectインスタンスに対して本APIを呼び出した場合，要求は無視されます。<br>
<table class="tblstyle">
<tr><td>FloatValue[入力]</td><td>単精度浮動小数点数型のStkObjectインスタンスに設定する値</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.22">4.22 void SetStringValue(const wchar_t* StringValue)</H2>
<div class="topic">
文字列型のStkObjectインスタンスに値を設定します。<br>
文字列型ではないStkObjectインスタンスに対して本APIを呼び出した場合，要求は無視されます。<br>
<table class="tblstyle">
<tr><td>StringValue[入力]</td><td>文字列型のStkObjectインスタンスに設定する値。本API内でStringValueのコピーが生成，設定されるため，API呼び出し後StringValueはdelete可能。</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.23">4.23 StkObject* GetFirstChildElement()</H2>
<div class="topic">
子のStkObjectインスタンスのうち，一番先頭のインスタンスを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>子のStkObjectインスタンスのうち，一番先頭のインスタンスのポインタ</td></tr>
</table>
</div><p>



<H2 ID="4.24">4.24 StkObject* GetLastChildElement()</H2>
<div class="topic">
子のStkObjectインスタンスのうち，一番最後のインスタンスを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>子のStkObjectインスタンスのうち，一番最後のインスタンスのポインタ</td></tr>
</table>
</div><p>



<H2 ID="4.25">4.25 StkObject* GetFirstAttribute()</H2>
<div class="topic">
属性であるStkObjectインスタンスのうち，一番先頭のインスタンスを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>属性であるStkObjectインスタンスのうち，一番先頭のインスタンスのポインタ</td></tr>
</table>
</div><p>



<H2 ID="4.26">4.26 StkObject* GetLastAttribute()</H2>
<div class="topic">
属性であるStkObjectインスタンスのうち，一番最後のインスタンスを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>属性であるStkObjectインスタンスのうち，一番最後のインスタンスのポインタ</td></tr>
</table>
</div><p>



<H2 ID="4.27">4.27 StkObject* GetNext()</H2>
<div class="topic">
同じ階層に存在するStkObjectインスタンスのうち，次のインスタンスを返します。<br>
<table class="tblstyle">
<tr><td>[戻り値]</td><td>同じ階層に存在するStkObjectインスタンスのうち，次のインスタンスのポインタ</td></tr>
</table>
</div><p>



<H2 ID="4.28">4.28 void AppendChildElement(StkObject* ChildObj)</H2>
<div class="topic">
要素保持領域に子のStkObjectインスタンスを追加します。<br>
追加するStkObjectインスタンスは，引数に指定したインスタンスそのものであり，コピーではありません。
したがって，本API呼び出し後，ChildObjを個別にdeleteすることはできません。<br>
ChildObjが示すStkObjectインスタンスの型が，STKOBJECT_UNKW_INT，STKOBJECT_UNKW_FLOAT，STKOBJECT_UNKW_STRINGの場合，本API呼び出し後，以下の何れの型に変更されます。<br>
<ul>
<li>STKOBJECT_ELEM_INT</li>
<li>STKOBJECT_ELEM_FLOAT</li>
<li>STKOBJECT_ELEM_STRING</li>
</ul> 
ChildObjが示すStkObjectインスタンスの型が，STKOBJECT_ELEMENT, STKOBJECT_UNKW_INT，STKOBJECT_UNKW_FLOAT，STKOBJECT_UNKW_STRINGの何れでもない場合，本APIは何も行わず，呼び出し元に戻ります。<br>
<table class="tblstyle">
<tr><td>ChildObj[入力]</td><td>要素保持領域に子として追加するStkObjectインスタンス</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.29">4.29 void AppendAttribute(StkObject* AttrObj)</H2>
<div class="topic">
属性としてStkObjectインスタンスを追加します。<br>
追加するStkObjectインスタンスは，引数に指定したインスタンスそのものであり，コピーではありません。
したがって，本API呼び出し後，AttrObjを個別にdeleteすることはできません。<br>
AttrObjが示すStkObjectインスタンスの型が，STKOBJECT_UNKW_INT，STKOBJECT_UNKW_FLOAT，STKOBJECT_UNKW_STRINGの場合，本API呼び出し後，以下の何れの型に変更されます。<br>
<ul>
<li>STKOBJECT_ATTR_INT</li>
<li>STKOBJECT_ATTR_FLOAT</li>
<li>STKOBJECT_ATTR_STRING</li>
</ul> <table class="tblstyle">
AttrObjが示すStkObjectインスタンスの型が，STKOBJECT_UNKW_INT，STKOBJECT_UNKW_FLOAT，STKOBJECT_UNKW_STRINGの何れでもない場合，本APIは何も行わず，呼び出し元に戻ります。<br>
<tr><td>AttrObj[入力]</td><td>属性として追加するStkObjectインスタンス</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.30">4.30 void ToXml(wchar_t* StrXml, int Size)</H2>
<div class="topic">
StkObjectインスタンスからXMLを生成します。<br>
トップノードとなるStkObjectインスタンスに対して本APIを呼び出すことができます。トップノードでないStkObjectインスタンスに対して本APIを呼び出したときの動作は保証されていません。<br>
文字列型StkObjectインスタンスからXMLを生成するとき，文字列を構成する値に応じて下記のようにエスケープされます。<br>
&lt; → &amp;lt;<br>
&gt; → &amp;gt;<br>
&amp; → &amp;amd;<br>
&quot; → &amp;quot;<br>
&apos; → &amp;apos;<br>
<table class="tblstyle">
<tr><td>StrXml[出力]</td><td>XMLを格納するバッファのポインタ。呼び出し元で予め空文字で初期化しておく必要がある。</td></tr>
<tr><td>Size[入力]</td><td>XMLを格納するバッファ(StrXml)のサイズ(単位はwchar_t)。</td></tr>
<tr><td>[戻り値]</td><td>なし</td></tr>
</table>
</div><p>



<H2 ID="4.31">4.31 int ToJson(wchar_t* StrJson, int Size)</H2>
<div class="topic">
StkObjectインスタンスからJSONを生成します。<br>
トップノードとなるStkObjectインスタンスに対して本APIを呼び出すことができます。トップノードでないStkObjectインスタンスに対して本APIを呼び出したときの動作は保証されていません。<br>
文字列型StkObjectインスタンスからJSONを生成するとき，文字列を構成する値に応じて下記のようにエスケープされます。<br>
\\ → \\\\<br>
\" → \\"<br/>
\f → \\f<br/>
\b → \\b<br/>
\n → \\n<br/>
\r → \\r<br/>
\t → \\t<br/>
0x01-0x1f → \\u0001-\\u001f<br/>
<p>
属性は，名称が"@attributes"の要素に変換されます。<br>
同じ名称のStkObjectインスタンスが同一階層上に連続して2つ以上出現する場合，本APIはそれらを配列で表現します。<br>
</p>
<table class="tblstyle">
<tr><td>StrJson[出力]</td><td>JSONを格納するバッファのポインタ。呼び出し元で予め空文字で初期化しておく必要がある。</td></tr>
<tr><td>Size[入力]</td><td>JSONを格納するバッファ(StrJson)のサイズ(単位はwchar_t)。</td></tr>
<tr><td>[戻り値]</td><td>JSONのサイズ</td></tr>
</table>
</div><p>



<H2 ID="4.32">4.32 static StkObject* CreateObjectFromXml(const wchar_t* StrXml, int* ErrorCode)</H2>
<div class="topic">
XMLから入れ子構造のStkObjectインスタンスを生成します。<br>
<table class="tblstyle">
<tr><td>StrXml[入力]</td><td>変換対象のXML</td></tr>
<tr><td>ErrorCode[出力]</td><td>
エラーコードを格納するint領域へのポインタ。<br>
0以上の値 : 正常終了<br>
-1以下の値 : エラーコード<br>
ERROR_XML_ELEMENT_END_NOT_FOUND : 要素の終端が存在しない<br>
ERROR_XML_EQUAL_FOUND_WITHOUT_ATTRIBUTE_NAME : イコール記号の前に属性名が存在しない<br>
ERROR_XML_INVALID_ELEMENT_START_FOUND : 要素の開始が不正<br>
ERROR_XML_INVALID_QUOT_FOUND : クォートの出現位置が不正<br>
ERROR_XML_INVALID_ELEMENT_END_FOUND : 要素の終端が不正<br>
ERROR_XML_SLASH_FOUND_WITHOUT_ELEMENT_END : スラッシュの後に要素の終端が存在しない<br>
ERROR_XML_CANNOT_HANDLE : XMLの構造が不正<br>
ERROR_XML_NO_ELEMENT_FOUND : 要素が存在しない<br>
ERROR_XML_INVALID_SLASH_FOUND : スラッシュの出現位置が不正<br>
ERROR_XML_SLASH_FOUND_WITHOUT_ELEMENT : スラッシュの前に要素が存在しない<br>
</td></tr>
<tr><td>[戻り値]</td><td>StrXmlをもとに生成したStkObjectインスタンス</td></tr>
</table>
</div><p>



<H2 ID="4.33">4.33 static StkObject* CreateObjectFromJson(const wchar_t* StrJson, int* ErrorCode)</H2>
<div class="topic">
JSONから入れ子構造のStkObjectインスタンスを生成します。<br>
<table class="tblstyle">
<tr><td>StrJson[入力]</td><td>変換対象のJSON</td></tr>
<tr><td>ErrorCode[出力]</td><td>
エラーコードを格納するint領域へのポインタ。<br>
0以上の値 : 正常終了<br>
-1以下の値 : エラーコード<br>
ERROR_JSON_NO_ELEMENT_FOUND : 要素が存在しない<br>
ERROR_JSON_INVALID_QUOT_FOUND : クォートの出現位置が不正<br>
ERROR_JSON_INVALID_COLON_FOUND : コロンの出現位置が不正<br>
ERROR_JSON_INVALID_STRUCTURE : JSONの構造が不正<br>
ERROR_JSON_INVALID_COMMA : カンマの出現位置が不正<br>
ERROR_JSON_CANNOT_HANDLE : JSONの構造が不正<br>
ERROR_JSON_INVALID_ARRAY_STRUCTURE : 配列の構造が不正<br>
ERROR_JSON_NO_ROOT_ELEMENT : トップノードが存在しない<br>
</td></tr>
<tr><td>[戻り値]</td><td>StrJsonをもとに生成したStkObjectインスタンス</td></tr>
</table>
</div><p>



<H2 ID="4.34">4.34 static int Analyze(const wchar_t* Txt)</H2>
<div class="topic">
指定した文字列がXMLかJSONかを判定します。<br>
<table class="tblstyle">
<tr><td>Txt[入力]</td><td>判定の対象となる文字列</td></tr>
<tr><td>[戻り値]</td><td>判定結果 (-1: TxtはXML,JSON,空/空白文字の何れでもない, 0: TxtはNULL, 空文字または空白文字から構成される, 1: TxtはXML, 2: TxtはJSON)</td></tr>
</table>
</div><p>



</div>
</BODY>
